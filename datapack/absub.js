//@ts-check
const fs = require("fs");
const sounds = require("../resourcepack/assets/arc86/sounds.json");
const postLines = [];
const lines = Object.keys(sounds)
	.map(key => {
		if (!sounds[key].absub) return [];
		const {
			id,
			absub: { points },
		} = sounds[key];
		const lastPoint = Math.max(
			...Object.keys(points).map(x => parseInt(x, 10))
		);
		if (lastPoint !== -Infinity)
			postLines.push(
				`execute if score $id absubState matches ${id} if score $time absubState matches ${lastPoint} run function arc86:absub/reset`
			);
		let lastPerson = "??";
		return Object.keys(points).map((spk, i, arr) => {
			const pk = parseInt(spk, 10);
			const pv = points[pk];
			const pkn = parseInt(arr[i + 1], 10);
			const line = `execute if score $id absubState matches ${id} if score $time absubState matches ${
				pkn ? `${pk}..${pkn - 1}` : pk
			} run title @a actionbar ${JSON.stringify([
				{ text: pv.person || lastPerson, bold: true },
				{ text: ": ", bold: true },
				{ text: pv.msg, bold: false },
			])}`;
			lastPerson = pv.person;
			return line;
		});
	})
	.reduce((a, b) => a.concat(b));

const out = `# Auto-generated by absub.js
# Edit sounds.json def and rerun to edit

${lines.join("\n")}

${postLines.join("\n")}

`;

fs.writeFileSync(
	require("path").join(
		__dirname,
		"data",
		"arc86",
		"functions",
		"absub",
		"gentick.mcfunction"
	),
	out,
	{ encoding: "utf8" }
);
